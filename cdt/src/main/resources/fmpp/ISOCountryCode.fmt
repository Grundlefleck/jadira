<@pp.changeOutputFile name="org/jadira/cdt/country/ISOCountryCode.java" />
/*
 *  Copyright 2012 Christopher Pheby
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.jadira.cdt.country;

import java.util.HashMap;
import java.util.Map;

import com.google.i18n.phonenumbers.PhoneNumberUtil;

/**
* Enumeration of ISO <a href="http://en.wikipedia.org/wiki/ISO_3166-1">ISO 3166-1</a>
* country codes.
* <p>
* The Enum names of this enumeration themselves are represented by
* <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a>
* codes. 
* Instance methods return country name ({@link ISOCountryCode#getName()}), 
* <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-3" >ISO 3166-1 alpha-3</a> codes ({@link ISOCountryCode#getAlpha3()}),
* <a href="http://en.wikipedia.org/wiki/ISO_3166-1_numeric">ISO 3166-1 numeric</a> codes ({@link ISOCountryCode#getNumeric()}),
* <a href="http://en.wikipedia.org/wiki/E.164">and E.164 the dialling region</a> code ({@link ISOCountryCode#getDiallingRegionCode()})
* Static factory methods can retrieve ISOCountryCode instances that
* corresponds to a given code.
* </p>
* <p>
* To update this class, populate using countrynames.txt, downloadable from <a href="http://opengeocode.org/download/countrynames.txt"/>.
* For the purpose of FMPP, all but one line of header must be removed. 
* 
*/
public enum ISOCountryCode {

<#list countryCode as countryCode>
    ${countryCode.alpha2}("${countryCode.englishShortnameReading}", "${countryCode.alpha3}", ${countryCode.numeric}),
</#list>;

    private static final Map<String, ISOCountryCode> alpha3Map = new HashMap<String, ISOCountryCode>();
    private static final Map<Integer, ISOCountryCode> numericMap = new HashMap<Integer, ISOCountryCode>();

    private static final PhoneNumberUtil PHONE_NUMBER_UTIL = PhoneNumberUtil.getInstance();
    
    static {
    	
        for (ISOCountryCode next : values()) {
            alpha3Map.put(next.getAlpha3(), next);
            numericMap.put(next.getNumeric(), next);
        }
    }

    private final String name;
    private final String alpha3;
    private final int numeric;

    private ISOCountryCode(String name, String alpha3, int numeric) {
        this.name = name;
        this.alpha3 = alpha3;
        this.numeric = numeric;
    }

	/**
	 * Get the country name.
	 * @return The country name.
	 */
	public String getName() {
        return name;
    }

	/**
	 * Get the <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2" >ISO 3166-1 alpha-2</a> code.
	 * @return The <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code.
	 */
	public String getAlpha2() {
		return name();
	}

	/**
	 * Get the <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-3" >ISO 3166-1 alpha-3</a> code.
	 * @return The <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-3">ISO 3166-1 alpha-3</a> code.
	 */
	public String getAlpha3() {
		return alpha3;
	}

	/**
	 * Get the <a href="http://en.wikipedia.org/wiki/ISO_3166-1_numeric" >ISO 3166-1 numeric</a> code.
	 * @return The <a href="http://en.wikipedia.org/wiki/ISO_3166-1_numeric">ISO 3166-1 numeric</a> code.
	 */
	public int getNumeric() {
		return numeric;
	}
	
	/**
	 * Gets the <a href="http://en.wikipedia.org/wiki/E.164">International Direct Dial</a> prefix for the country
	 * @return
	 */
	public int getDiallingRegionCode() {
		return PHONE_NUMBER_UTIL.getCountryCodeForRegion(this.getAlpha2());
	}

	/**
	 * Get a CountryCode that corresponds to a given ISO 3166-1 <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">alpha-2</a> or 
	 * <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-3">alpha-3</a> code.
	 * @param code An ISO 3166-1 <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">alpha-2</a> or 
	 * <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-3">alpha-3</a> code.
	 * @return A ISOCountryCode instance, or null if not found.
	 */
	public static ISOCountryCode getByCode(String code) {
		
		if (code == null) {
			return null;
		}

		if (code.length() == 2) {
			return getByAlpha2Code(code);
		} else if (code.length() == 3) {
			return getByAlpha3Code(code);
		} else {
			return null;
		}
	}

	/**
	 * Get a CountryCode that corresponds to a given ISO 3166-1 <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">alpha-2</a> code.
	 * @param code An ISO 3166-1 <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">alpha-2</a>.
	 * @return A ISOCountryCode instance, or null if not found.
	 */
	public static ISOCountryCode getByAlpha2Code(String code) {
		try {
			return Enum.valueOf(ISOCountryCode.class, code);
		} catch (IllegalArgumentException e) {
			return null;
		}
	}

	/**
	 * Get a CountryCode that corresponds to a given ISO 3166-1 <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-3">alpha-3</a> code.
	 * @param code An ISO 3166-1 <a href="http://en.wikipedia.org/wiki/ISO_3166-1_alpha-3">alpha-3</a> code.
	 * @return A ISOCountryCode instance, or null if not found.
	 */

	private static ISOCountryCode getByAlpha3Code(String code) {
		return alpha3Map.get(code);
	}

	/**
	 * Get a CountryCode that corresponds to a given <a href="http://en.wikipedia.org/wiki/ISO_3166-1_numeric">ISO 3166-1
	 * numeric</a> code.
	 * @param code An <a href="http://en.wikipedia.org/wiki/ISO_3166-1_numeric">ISO 3166-1 numeric</a> code.
	 * @return A CountryCode instance, or null if not found.
	 */
	public static ISOCountryCode getByNumberCode(int code) {
		return numericMap.get(code);
	}

	/**
	 * Get a CountryCode that corresponds to a given <a href="http://en.wikipedia.org/wiki/E.164">Dialling Region</a> code.
	 * @param code An <a href="http://en.wikipedia.org/wiki/E.164">E.164 Dialling Region Code</a> code.
	 * @return A CountryCode instance, or null if not found.
	 */
	public static ISOCountryCode getByDiallingRegionCode(int code) {
		return getByCode(PHONE_NUMBER_UTIL.getRegionCodeForCountryCode(code));
	}
}